<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:Converters">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:AddressConverter x:Key="AddressConverter"/>
    <converters:BytesToMegabytesConverter x:Key="BytesToMegabytesConverter"/>
    <converters:DateTimeConverter x:Key="DateTimeConverter"/>
    <converters:DeliveryStateConverter x:Key="DeliveryStateConverter"/>
    <converters:ImageMessageStateConverter x:Key="ImageMessageStateConverter"/>
    <converters:MessageDirectionAlignmentConverter x:Key="MessageDirectionAlignmentConverter"/>
    <converters:MessageDirectionColorConverter x:Key="MessageDirectionColorConverter"/>
    <converters:MessageDirectionToVisibilityConverter x:Key="MessageDirectionToVisibilityConverter"/>
    <converters:NetworkSpeedConverter x:Key="NetworkSpeedConverter"/>
    <converters:NicknameUpdateStateConverter x:Key="NicknameUpdateStateConverter"/>
    <converters:ProfilePictureLoadingStatusConverter x:Key="ProfilePictureLoadingStatusConverter"/>
    <converters:ProgressConverter x:Key="ProgressConverter"/>
    <converters:RecepientConverter x:Key="RecepientConverter"/>
    <converters:TimeSpanConverter x:Key="TimeSpanConverter"/>
    <converters:TrackerConnectionStatusConverter x:Key="TrackerConnectionStatusConverter"/>

    <SolidColorBrush x:Key="ServerColor" Color="LightCoral" Opacity="0.7"/>
    <SolidColorBrush x:Key="ClientColor" Color="Blue" Opacity="0.2"/>
    
    <Style TargetType="TextBlock" x:Key="BaseTextBlock">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="TitleTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="FontSize" Value="18"/>
    </Style>
    
    <Style TargetType="TextBlock" x:Key="MessageDateTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="FontStyle" Value="Oblique"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="MessageContentTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="FileInfoTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="2, 2, 2, 0"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="MessageDeliveryStateTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FontStyle" Value="Oblique"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="NewMessagesTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Visibility" Value="{Binding HasNewMessages, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Setter Property="Text" Value="New messages!"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="ImageExtensionTextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Opacity="0.7" Color="Black"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox" x:Key="BaseTextBox">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Left"/>
    </Style>

    <Style TargetType="TextBox" x:Key="IncomingMessageTextBox" BasedOn="{StaticResource BaseTextBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsReadOnly" Value="True"/>
    </Style>
    
    <Style TargetType="TextBox" x:Key="MessageTextBox" BasedOn="{StaticResource BaseTextBox}">
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <Style TargetType="Button" x:Key="BaseButton">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style TargetType="Button" x:Key="SendMessageButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style TargetType="ComboBox" x:Key="BaseComboBox">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="RectangleStyle" TargetType="Rectangle">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Fill" Value="Black"/>
        <Setter Property="Margin" Value="6, 0, 6, 0"/>
    </Style>

    <Style x:Key="PictureBorderStyle" TargetType="Border">
        <Setter Property="Width" Value="300"/>
        <Setter Property="Height" Value="300"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style x:Key="ProfilePictureBorderStyle" TargetType="Border" BasedOn="{StaticResource PictureBorderStyle}">
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="200"/>
    </Style>

    <Style x:Key="PeerPictureBorderStyle" TargetType="Border" BasedOn="{StaticResource PictureBorderStyle}">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="70"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    
    <Style x:Key="BaseMediaElementStyle" TargetType="MediaElement">
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="StretchDirection" Value="DownOnly"/>
    </Style>

    <Style x:Key="TabControlStyle" TargetType="TabControl">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="StackPanelStyle" TargetType="StackPanel">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Orientation" Value="Horizontal"/>
    </Style>

    <Style x:Key="EllipseStyle" TargetType="Ellipse">
        <Setter Property="Width" Value="5"/>
        <Setter Property="Height" Value="5"/>
        <Setter Property="Fill" Value="Black"/>
        <Setter Property="Margin" Value="5, 0, 5, 0"/>
    </Style>

    <Style x:Key="StackPanelInListBoxStyle" TargetType="StackPanel" BasedOn="{StaticResource StackPanelStyle}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Orientation" Value="Vertical"/>
    </Style>

    <Style x:Key="PopUpTextBlock" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource 
                Mode=FindAncestor, 
                AncestorType={x:Type ListBoxItem}},
                Path=IsSelected}" 
                Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PopUpButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource 
                Mode=FindAncestor, 
                AncestorType={x:Type ListBoxItem}},
                Path=IsSelected}" 
                Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CancellationStatus" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Text" Value="Cancelled"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Foreground" Value="Blue" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsCancelled}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CalculatedHashTextBlock" TargetType="TextBlock" BasedOn="{StaticResource PopUpTextBlock}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding HashVerificationStatus}" Value="Started"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource 
                        Mode=FindAncestor, 
                        AncestorType={x:Type ListBoxItem}},
                        Path=IsSelected}" 
                        Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CancellationButton" TargetType="Button" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="IsEnabled" Value="True"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource 
                    Mode=FindAncestor, 
                    AncestorType={x:Type ListBoxItem}},
                    Path=IsSelected}" 
                    Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsDownloaded}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsCancelled}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HashVerificationStatus" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Foreground" Value="DarkBlue"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding HashVerificationStatus}" Value="Started">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Text" Value="Hash verification in progress..."/>
            </DataTrigger>

            <DataTrigger Binding="{Binding HashVerificationStatus}" Value="Failed">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Text" Value="Hash verification is failed. ❎"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding HashVerificationStatus}" Value="Positive">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Text" Value="Hash is correct! ✅"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding HashVerificationStatus}" Value="Negative">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Text" Value="Hash is NOT correct! ❎ Try download file again"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HashTextBlock" TargetType="TextBlock" BasedOn="{StaticResource PopUpTextBlock}">
        <Setter Property="Text" Value="🔴 Calculating hash..."/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsHashCalculated}" Value="True">
                <Setter Property="Text" Value="{Binding Hash, StringFormat={}SHA256 Hash: {0}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FinishTimeTextBlock" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlock}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Text" Value="Finish time"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsFinished}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource 
                        Mode=FindAncestor, 
                        AncestorType={x:Type ListBoxItem}},
                        Path=IsSelected}" 
                        Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Text" Value="{Binding FinishTime, Converter={StaticResource DateTimeConverter}, StringFormat={}Finish time: {0}}"/>
                    <Setter Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>